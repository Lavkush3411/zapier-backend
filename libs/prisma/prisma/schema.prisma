// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  sub      String @id @default(uuid())
  name     String
  email    String
  password String
}

model Zap {
  id               String         @id @default(uuid())
  name             String
  triggerCondition Json? // this will be the actual check if actions should be executed or not.
  // trigger condition will be derived from trigger type and subtype
  triggerTypeId    String
  triggerSubTypeId String
  triggerType      TriggerType    @relation(fields: [triggerTypeId], references: [id])
  triggerSubType   TriggerSubType @relation(fields: [triggerSubTypeId], references: [id])
  actions          Action[]
  zapRuns          ZapRun[]
  zapRunOutboxes   ZapRunOutBox[]
}

model TriggerType {
  id             String           @id @default(uuid())
  name           String
  triggerSubType TriggerSubType[]
  zaps           Zap[]
}

model TriggerSubType {
  id            String      @id @default(uuid())
  name          String
  triggerTypeId String
  zaps          Zap[]
  triggerType   TriggerType @relation(fields: [triggerTypeId], references: [id])
}

// this action will be performed on zap hit
// each zap can have number of actions
// when zap hits extract all the actions and type from available actions  by sortingorder
// put them to zap outbox
// process them based on available actions and their order
model Action {
  id                String          @id @default(uuid())
  actionData        Json? // data that will be filled by user from required data field of available action
  availableActionId String
  zapId             String
  sortingOrder      Int             @default(0)
  type              AvailableAction @relation(fields: [availableActionId], references: [id])
  zap               Zap             @relation(fields: [zapId], references: [id], onDelete: Cascade)
}

// we directly have available actions 
// ex: send Gmail, send Outlook mail not like action and their subtypes
model AvailableAction {
  id           String   @id @default(uuid())
  name         String
  requiredData Json? // array of objects this fileds will be popultated to the user to fill
  actions      Action[]
}

model ZapRun {
  id       String @id @default(uuid())
  zapId    String
  metaData Json
  zap      Zap    @relation(fields: [zapId], references: [id], onDelete: Cascade)
}

model ZapRunOutBox {
  id       String @id @default(uuid())
  zapId    String
  metaData Json
  zap      Zap    @relation(fields: [zapId], references: [id], onDelete: Cascade)
}
